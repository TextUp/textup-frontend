{{#slideout-pane
    headerComponent=(component "slideout-pane/title"
        title=(concat (service-prop "slideout/notificationService" "phoneOwnerName") " Notifications"))
    footerComponent=(component "slideout-pane/actions"
        showFooter=(service-prop "slideout/notificationService" "shouldShowFooter")
        onPrimary=(service-action "slideout/notificationService" "finishSlideout")
        disablePrimary=(service-prop "slideout/notificationService" "shouldDisablePrimaryAction")
        primaryLabel="Update")
    onClose=(service-action "slideout/notificationService" "cancelSlideout")
    forceKeepOpen=(service-prop "slideout/notificationService" "shouldForceKeepOpen") as |slideout|}}
    <div class="form">
        <div class="form__group">
            <label for="Away Message" class="form__label form__label--emphasize">
                {{service-prop "slideout/notificationService" "phoneOwnerName"}}'s Away Message
            </label>
            <span class="form__label form__label--multiline">
                TextUp will reply with this message to texts
                <b>received by {{service-prop "slideout/notificationService" "phoneOwnerName"}}</b> when
                {{#if (service-prop "slideout/notificationService" "isPhoneOwnerATeam")}}
                    no one is
                {{else}}
                    you are not
                {{/if}}
                available. TextUp automatically adds an emergency disclaimer to your custom message.
            </span>
            {{#hide-show focusOnOpenSelector="textarea"
                clickOutToClose=true
                focusOutToClose=true
                ignoreCloseSelector="" as |hideShow|}}
                {{#if hideShow.isOpen}}
                    {{!-- [FUTURE] need a textarea component that does not assume two-way binding --}}
                    {{textarea rows="3"
                        autoresize=true
                        maxLengthContainerClass="margin-b"
                        class="form-control"
                        maxLength=(service-prop "slideout/notificationService" "activePhone.awayMessageMaxLength")
                        maxLengthPosition=(constant "MAX_LENGTH.POSITION.BOTTOM")
                        value=(get (service-prop "slideout/notificationService" "activePhone") "awayMessage")
                        validateObj=(service-prop "slideout/notificationService" "activePhone")
                        validateField="awayMessage"
                        validate="bottom"}}
                {{/if}}
                <div class="form-control-minimal pad-all"
                    tabindex={{if hideShow.isOpen "" "0"}}
                    onfocus={{hideShow.actions.open}}
                    onclick={{hideShow.actions.toggle}}>
                    {{service-prop "slideout/notificationService" "activePhone.awayMessage"}}
                    <b>{{service-prop "slideout/notificationService" "awayMessageSuffix"}}</b>
                </div>
            {{/hide-show}}
        </div>
        <div class="form__group">
            <label for="Voicemail" class="form__label form__label--emphasize">
                {{service-prop "slideout/notificationService" "phoneOwnerName"}}'s Voicemail
            </label>
            <div class="row margin-t">
                <div class="xs-2-row-20 s-row-20 control-text control-text--no-ellipsis">
                    <input id="use-voicemail-recording-false"
                        type="radio"
                        class={{if (service-prop "slideout/notificationService" "activePhone.useVoicemailRecordingIfPresent")
                            "input--not-checked"
                            "input--checked"}}
                        onclick={{action
                            (service-mut "slideout/notificationService" "activePhone.useVoicemailRecordingIfPresent")
                            false}}>
                </div>
                <label for="use-voicemail-recording-false"
                    class="xs-18-row-20 s-9-row-20 control-text pad-l-half pad-r-half clickable">
                    <span class="text-normal">Read away message</span>
                </label>
                {{#multi-toggle classNames="xs-full-row s-row-2"
                    selectIndex=(if (eq
                        (service-prop "slideout/notificationService" "activePhone.voice")
                        (constant "VOICE_TYPE.MALE")) 0 1) as |toggle doRegister|}}
                    {{#multi-toggle/item doRegister=doRegister
                        color=(constant "COLOR.LIGHT_BLUE")
                        onSelect=(action
                            (service-mut "slideout/notificationService" "activePhone.voice")
                            (constant "VOICE_TYPE.MALE"))}}
                        Male voice
                    {{/multi-toggle/item}}
                    {{#multi-toggle/item doRegister=doRegister
                        color=(constant "COLOR.BRAND")
                        onSelect=(action
                            (service-mut "slideout/notificationService" "activePhone.voice")
                            (constant "VOICE_TYPE.FEMALE"))}}
                        Female voice
                    {{/multi-toggle/item}}
                {{/multi-toggle}}
            </div>
            <div class="row margin-t margin-b-half margin-r-half">
                <div class="xs-2-row-20 s-row-20 control-text control-text--no-ellipsis">
                    <input id="use-voicemail-recording-true"
                        type="radio"
                        class={{if (service-prop "slideout/notificationService" "activePhone.useVoicemailRecordingIfPresent")
                            "input--checked"
                            "input--not-checked"}}
                        onclick={{action
                            (service-mut "slideout/notificationService" "activePhone.useVoicemailRecordingIfPresent")
                            true}}>
                </div>
                <label for="use-voicemail-recording-true"
                    class="xs-18-row-20 s-19-row-20 control-text pad-l-half clickable">
                    <span class="text-normal">Use voicemail recording</span>
                </label>
            </div>
            <div class="offset-s-row-20">
                {{#audio-control showAddIfNone=true
                    audio=(service-prop "slideout/notificationService" "activePhone.media.content.displayedAudio")
                    listProps=(hash maxNumToDisplay=1 sortPropName="whenCreated" sortLowToHigh=false)
                    onAdd=(service-action "slideout/notificationService" "onFinishRecordingGreeting")
                    startAddMessage="Redo recording"
                    cancelAddMessage="Cancel redo" as |hideShow|}}
                    {{#if hideShow.isOpen}}
                        <div class="flex__item">
                            {{#action-button class="button button--expand"
                                disabled=(service-prop "slideout/notificationService" "shouldDisableVoicemailGreetingCall")
                                onAction=(service-action "slideout/notificationService" "onRequestVoicemailGreetingCall")}}
                                Call me to record
                            {{/action-button}}
                        </div>
                    {{/if}}
                {{/audio-control}}
            </div>
        </div>
        {{#with (service-prop "slideout/notificationService" "selfPolicy") as |selfPolicy|}}
            <hr>
            <div class="form__group">
                <label for="notification-type" class="control-text form__label xs-full-row s-row-2">
                    Send notifications via
                </label>
                {{#multi-toggle classNames="xs-full-row s-row-2"
                    selectIndex=(if (eq selfPolicy.method (constant "NOTIFICATION.METHOD.EMAIL")) 0 1) as |toggle doRegister|}}
                    {{#multi-toggle/item doRegister=doRegister
                        color=(constant "COLOR.LIGHT_BLUE")
                        onSelect=(action (mut selfPolicy.method) (constant "NOTIFICATION.METHOD.EMAIL"))}}
                        email
                    {{/multi-toggle/item}}
                    {{#multi-toggle/item doRegister=doRegister
                        color=(constant "COLOR.BRAND")
                        onSelect=(action (mut selfPolicy.method) (constant "NOTIFICATION.METHOD.TEXT"))}}
                        text message
                    {{/multi-toggle/item}}
                {{/multi-toggle}}
            </div>
            <div class="form__group">
                <label for="notification-type" class="control-text form__label xs-full-row s-row-2">
                    Notify
                    {{#if (not (eq selfPolicy.frequency (constant "NOTIFICATION.FREQUENCY.IMMEDIATELY")))}}
                        at most every
                    {{/if}}
                </label>
                {{#multi-toggle classNames="xs-full-row s-row-2"
                    selectIndex=(if
                        (eq selfPolicy.frequency (constant "NOTIFICATION.FREQUENCY.IMMEDIATELY")) 0
                        (if (eq selfPolicy.frequency (constant "NOTIFICATION.FREQUENCY.QUARTER_HOUR")) 1
                            (if (eq selfPolicy.frequency (constant "NOTIFICATION.FREQUENCY.HALF_HOUR")) 2
                                (if (eq selfPolicy.frequency (constant "NOTIFICATION.FREQUENCY.HOUR")) 3)))) as |toggle doRegister|}}
                    {{#multi-toggle/item doRegister=doRegister
                        color=(constant "COLOR.BRAND")
                        onSelect=(action (mut selfPolicy.frequency) (constant "NOTIFICATION.FREQUENCY.IMMEDIATELY"))}}
                        immediately
                    {{/multi-toggle/item}}
                    {{#multi-toggle/item doRegister=doRegister
                        color=(constant "COLOR.LIGHT_BLUE")
                        onSelect=(action (mut selfPolicy.frequency) (constant "NOTIFICATION.FREQUENCY.QUARTER_HOUR"))}}
                        15 minutes
                    {{/multi-toggle/item}}
                    {{#multi-toggle/item doRegister=doRegister
                        color=(constant "COLOR.MEDIUM_BLUE")
                        onSelect=(action (mut selfPolicy.frequency) (constant "NOTIFICATION.FREQUENCY.HALF_HOUR"))}}
                        30 minutes
                    {{/multi-toggle/item}}
                    {{#multi-toggle/item doRegister=doRegister
                        color=(constant "COLOR.LIGHT_GRAY")
                        onSelect=(action (mut selfPolicy.frequency) (constant "NOTIFICATION.FREQUENCY.HOUR"))}}
                        1 hour
                    {{/multi-toggle/item}}
                {{/multi-toggle}}
            </div>
        {{/with}}

        <hr>

        {{#if (service-prop "slideout/notificationService" "isMissingPersonalNumber")}}
            <div class="bg-color pad-all margin-b border-radius-all">
                You have connected a personal phone number to your account. For text notifications to be sent,
                <button type="button"
                    class="btn-link"
                    onclick={{action
                        slideout.actions.close
                        (service-action "slideout/accountService" "openSlideout")}}>
                    please add a personal phone number to your account.
                </button>
            </div>
        {{/if}}
        {{availability-control
            self=(service-prop "slideout/notificationService" "selfPolicy")
            others=(service-prop "slideout/notificationService" "otherPolicies")
            onAvailabilityTypeChange=(service-mut "slideout/notificationService" "selfPolicy.schedule.manual")
            onManualAvailabilityChange=(service-mut "slideout/notificationService" "selfPolicy.schedule.manualIsAvailable")
            onScheduleAvailabilityChange=(service-action "scheduleService" "replaceRange"
                (service-prop "slideout/notificationService" "selfPolicy.schedule"))}}
    </div>
{{/slideout-pane}}
